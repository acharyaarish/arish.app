{"version":3,"file":"static/js/868.57430ff8.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/toast/src/use-toast.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/textarea/src/textarea.tsx","../node_modules/utilities/object-utils/src/omit.ts","components/Contact.js"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  Input,\n  Textarea,\n  Button,\n  Link,\n  Flex,\n  useToast,\n  VStack,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { FaGithub } from 'react-icons/fa';\nimport { motion } from 'framer-motion';\n\nconst Contact = () => {\n  const [formData, setFormData] = useState({ name: '', email: '', message: '' });\n  const toast = useToast();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const formUrl = 'https://formspree.io/f/mvgpzrlw';\n    fetch(formUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(formData),\n    })\n      .then((response) => {\n        if (response.ok) {\n          toast({\n            title: 'Message sent.',\n            description: 'Your message was sent successfully!',\n            status: 'success',\n            duration: 5000,\n            isClosable: true,\n          });\n          setFormData({ name: '', email: '', message: '' });\n        } else {\n          toast({\n            title: 'Error.',\n            description: 'Failed to send message.',\n            status: 'error',\n            duration: 5000,\n            isClosable: true,\n          });\n        }\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n        toast({\n          title: 'Error.',\n          description: 'Failed to send message.',\n          status: 'error',\n          duration: 5000,\n          isClosable: true,\n        });\n      });\n  };\n\n  const textColor = useColorModeValue('#333', '#E2E8F0');\n  const borderColor = useColorModeValue('#CCCCCC', '#555555');\n  const inputBg = useColorModeValue('#FFFFFF', '#3D3D3D');\n  const inputFocusBorder = useColorModeValue('#3182ce', '#90CDF4');\n  const sectionBg = useColorModeValue('#ebebe7', '#263238');\n\n  return (\n    <Box\n      as=\"section\"\n      bg={sectionBg}\n      color={textColor}\n      py={16}\n      id=\"contact\"\n      borderRadius=\"lg\"\n      boxShadow=\"lg\"\n      position=\"relative\"\n      overflow=\"hidden\"\n    >\n      <Container maxW=\"container.md\" textAlign=\"center\">\n        <Heading\n          as={motion.h2}\n          size=\"xl\"\n          mb={10}\n          color={textColor}\n          fontWeight=\"bold\"\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n        >\n          Get in Touch 📬\n        </Heading>\n        <form onSubmit={handleSubmit}>\n          <VStack spacing={6} align=\"stretch\">\n            <Input\n              placeholder=\"Your Name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n              as={motion.input}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.5 }}\n            />\n            <Input\n              placeholder=\"Your Email\"\n              type=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n              as={motion.input}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.6 }}\n            />\n            <Textarea\n              placeholder=\"Your Message\"\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              borderColor={borderColor}\n              bg={inputBg}\n              _hover={{ borderColor: inputFocusBorder }}\n              _focus={{ borderColor: inputFocusBorder, boxShadow: '0 0 0 1px #3182ce' }}\n              isRequired\n              as={motion.textarea}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 0.7 }}\n            />\n          </VStack>\n          <Button\n            type=\"submit\"\n            colorScheme=\"teal\"\n            bg=\"#479761\"\n            _hover={{ bg: '#367d5b', transform: 'scale(1.05)' }}\n            size=\"lg\"\n            mt={8}\n            isFullWidth\n            transition=\"all 0.3s\"\n            as={motion.button}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n          >\n            Send Message 💬\n          </Button>\n        </form>\n        <Flex justify=\"center\" mt={8}>\n          <Link href=\"https://github.com/acharyaarish\" isExternal>\n            <Button\n              leftIcon={<FaGithub />}\n              colorScheme=\"gray\"\n              variant=\"ghost\"\n              fontSize=\"2xl\"\n              _hover={{ color: 'teal.500' }}\n              as={motion.button}\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ duration: 1 }}\n            >\n              GitHub\n            </Button>\n          </Link>\n        </Flex>\n        <Box mt={8} fontSize=\"sm\" color={textColor}>\n          &copy; 2023 Arish Acharya - All rights reserved.\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Contact;\n"],"names":["useToast","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction","FormControlStylesProvider","useFormControlStyles","createContext","name","errorMessage","FormControlProvider","useFormControlContext","strict","useFormControl","props","isDisabled","isInvalid","isReadOnly","isRequired","rest","_a","_b","_c","field","id","disabled","readOnly","required","onFocus","onBlur","labelIds","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","join","callAllHandlers","useFormControlProps","ariaAttr","forwardRef","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","getRootProps","htmlProps","_","context","idProp","uuid","useId","concat","labelId","setHasFeedbackText","useState","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","arguments","length","undefined","mergeRefs","node","getLabelProps","props2","dataAttr","htmlFor","getErrorMessageProps","role","getRequiredIndicatorProps","children","useFormControlProvider","className","cx","jsx","value","chakra","div","__css","displayName","helperText","Input","htmlSize","input","_className","size","omitted","Textarea","useStyleConfig","rows","textareaProps","textareaStyles","object","keysToOmit","clone","Object","assign","key","omit","textarea","Contact","formData","setFormData","email","message","toast","handleChange","e","target","textColor","useColorModeValue","borderColor","inputBg","inputFocusBorder","sectionBg","_jsx","Box","as","bg","color","py","borderRadius","boxShadow","position","overflow","_jsxs","Container","maxW","textAlign","Heading","motion","h2","mb","fontWeight","initial","opacity","y","animate","transition","duration","onSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","ok","title","description","status","isClosable","catch","error","console","VStack","spacing","align","placeholder","onChange","_hover","_focus","type","Button","colorScheme","transform","mt","isFullWidth","button","Flex","justify","Link","href","isExternal","leftIcon","FaGithub","variant","fontSize"],"sourceRoot":""}