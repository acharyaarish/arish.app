{"version":3,"file":"static/js/179.d5dc3314.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/progress/src/progress.utils.tsx","../node_modules/@chakra-ui/progress/src/progress.tsx","components/Experience.js","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/wrap.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/tag/src/tag.tsx"],"sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\n\nfunction valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min)\n}\n\ntype Keyframe = ReturnType<typeof keyframes>\n\nexport const spin: Keyframe = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate: Keyframe = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress: Keyframe = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe: Keyframe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n  role?: React.AriaRole\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\",\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return typeof getValueText === \"function\"\n      ? getValueText(value, percent)\n      : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role,\n    },\n    percent,\n    value,\n  }\n}\n","import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nconst [ProgressStylesProvider, useProgressStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `,\n})\n\nexport { useProgressStyles }\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nconst ProgressFilledTrack = forwardRef<ProgressFilledTrackProps, \"div\">(\n  (props, ref) => {\n    const { min, max, value, isIndeterminate, role, ...rest } = props\n    const progress = getProgressProps({\n      value,\n      min,\n      max,\n      isIndeterminate,\n      role,\n    })\n\n    const styles = useProgressStyles()\n    const trackStyles = {\n      height: \"100%\",\n      ...styles.filledTrack,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        style={{ width: `${progress.percent}%`, ...rest.style }}\n        {...progress.bind}\n        {...rest}\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   *\n   * @default false\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   *\n   * @default false\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps<\"Progress\">,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nexport const Progress = forwardRef<ProgressProps, \"div\">((props, ref) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-valuetext\": ariaValueText,\n    title,\n    role,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const borderRadius =\n    propBorderRadius ??\n    (styles.track?.borderRadius as string | number | undefined)\n\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      borderRadius={borderRadius}\n      __css={trackStyles}\n      {...rest}\n    >\n      <ProgressStylesProvider value={styles}>\n        <ProgressFilledTrack\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-valuetext={ariaValueText}\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n          title={title}\n          role={role}\n        />\n        {children}\n      </ProgressStylesProvider>\n    </chakra.div>\n  )\n})\n\nProgress.displayName = \"Progress\"\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  SimpleGrid,\n  Flex,\n  Text,\n  Image,\n  Progress,\n  Tag,\n  Wrap,\n  WrapItem,\n  useColorModeValue,\n  Link,\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\n\nconst Experience = () => {\n  const sectionBg = useColorModeValue(\n    'linear-gradient(135deg, #F7FAFC 0%, #E3F2FD 100%)',\n    'linear-gradient(135deg, #1A202C 0%, #2D3748 100%)'\n  );\n  const sectionColor = useColorModeValue('#2D3748', '#E2E8F0');\n  const cardBg = useColorModeValue('#FFFFFF', '#2D3748');\n  const headingColor = useColorModeValue('#2B6CB0', '#FFD700');\n  const textColor = useColorModeValue('#2D3748', '#E2E8F0');\n  const secondaryTextColor = useColorModeValue('#718096', '#A0AEC0');\n  const tagHoverColor = useColorModeValue('teal.600', 'teal.300');\n\n  const experiences = [\n    {\n      logo: `${process.env.PUBLIC_URL}/img/austriathlon-logo.png`,\n      date: 'Mar 2024 – Jul 2024',\n      company: 'AusTriathlon',\n      link: 'https://www.triathlon.org.au/',\n      hoverColor: 'rgba(33, 150, 243, 0.15)',\n      location: 'Canberra, Australia',\n      title: 'Data Analyst Intern',\n      description: [\n        'Automated large sets of triathlon cycling national and international datasets, reducing manual effort by 95% in calculation and visulization of laps.',\n        'Collaborated on innovative solutions to complex problems through advanced research.',\n        'Developed race lap calculations using Python and PowerBI to enhance player performance analysis.',\n      ],\n      tags: ['Python', 'R', 'PowerBI', 'Analytics'],\n      progress: 90,\n      learning: 'Gained deep insights into data automation and sports analytics using Python, R and PowerBI.'\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/img/shoesandsox-logo.png`,\n      date: 'August 2022 – Present',\n      company: 'Shoes and Sox',\n      link: 'https://www.shoesandsox.com.au',\n      hoverColor: 'rgba(255, 165, 0, 0.15)',\n      location: 'Canberra, Australia',\n      title: 'Sales Assistant',\n      description: [\n        'I developed strong administrative, analytical, and communication skills by assisting customers in product selection, managing daily tasks such as sales reporting, tracking KPIs, analyzing top-performing and underperforming products, and collaborating with management on budget oversight.',\n        'Contributed to launching a new loyalty program, wrote documentation, and trained team members on the new system.',\n      ],\n      tags: ['Sales Analysis', 'Data Reporting', 'Cost Optimization'],\n      progress: 90,\n      learning: 'Learned how data-driven decisions impact sales and efficiency.'\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/img/nepaloilcorp-logo.png`,\n      date: 'Nov 2020 – Nov 2021',\n      company: 'Nepal Oil Corporation',\n      link: 'https://noc.org.np/',\n      hoverColor: 'rgba(244, 67, 54, 0.15)',\n      location: 'Kathmandu, Nepal',\n      title: 'IT Data & Systems Analyst',\n      description: [\n        'Collaborated with the project manager and stakeholders to lead teams in configuring networks across all branches nationwide.',\n        'Resolved technical issues remotely and documented IT systems, including disaster recovery protocols and maintenance guides.',\n        'Customized SAP S4 Hana to meet organizational needs and executed SQL queries to optimize system performance.',\n      ],\n      tags: ['ERP', 'IT Management', 'Training'],\n      progress: 95,\n      learning: 'Mastered ERP deployment and IT management, ensuring system uptime and effective training.'\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/img/outsource-array-logo.png`,\n      date: 'Nov 2019 – Feb 2020',\n      company: 'Outsource Array',\n      link: 'https://www.outsourcearray.com',\n      hoverColor: 'rgba(76, 175, 80, 0.15)',\n      location: 'Kathmandu, Nepal',\n      title: 'Network Engineer Intern',\n      description: [\n        'Enhanced network reliability through LAN/WAN optimizations.',\n        'Improved security with VLAN configurations and tailored access controls.',\n        'Communicated changes effectively to stakeholders, enhancing operational efficiency.',\n      ],\n      tags: ['Networking', 'Security', 'LAN/WAN'],\n      progress: 80,\n      learning: 'Gained experience in networking and security, focusing on performance optimization.'\n    },\n  ];\n\n  return (\n    <Box as=\"section\" bg={sectionBg} color={sectionColor} py={20} px={4} id=\"experience\" position=\"relative\">\n      <Container maxW=\"container.xl\">\n        <Heading\n          as=\"h2\"\n          size=\"xl\"\n          mb={12}\n          color={headingColor}\n          textAlign=\"center\"\n          fontFamily=\"Poppins, sans-serif\"\n          fontWeight=\"extrabold\"\n          letterSpacing=\"wide\"\n        >\n          Experience 👨‍💻\n        </Heading>\n        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10}>\n          {experiences.map((experience, index) => (\n            <motion.div\n              key={index}\n              whileHover={{ translateY: -10 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Box\n                bg={cardBg}\n                color={textColor}\n                p={8}\n                borderRadius=\"lg\"\n                boxShadow=\"2xl\"\n                position=\"relative\"\n                _before={{\n                  content: '\"\"',\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  right: 0,\n                  bottom: 0,\n                  bg: experience.hoverColor,\n                  zIndex: 0,\n                  transition: 'opacity 0.3s ease-in-out',\n                  opacity: 0,\n                }}\n                _hover={{\n                  _before: {\n                    opacity: 1,\n                  },\n                  boxShadow: '0px 20px 30px rgba(0, 0, 0, 0.2)',\n                  transform: 'translateY(-10px)',\n                }}\n                transition=\"background-color 0.3s ease, transform 0.3s ease\"\n                h=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"space-between\"\n              >\n                <Flex align=\"center\" mb={4} zIndex={1} position=\"relative\">\n                  <Image\n                    src={experience.logo}\n                    alt={experience.company}\n                    borderRadius=\"full\"\n                    boxSize={{ base: \"60px\", md: \"70px\" }}\n                    mr={4}\n                    objectFit=\"contain\"\n                  />\n                  <Box textAlign=\"left\">\n                    <Link href={experience.link} isExternal fontWeight=\"bold\" fontSize={{ base: \"md\", md: \"lg\" }} color={headingColor} _hover={{ textDecoration: 'underline' }}>\n                      {experience.company}\n                    </Link>\n                    <Text fontSize={{ base: \"sm\", md: \"md\" }} color={secondaryTextColor} fontStyle=\"italic\">\n                      {experience.location}\n                    </Text>\n                    <Text fontSize={{ base: \"sm\", md: \"md\" }} color={secondaryTextColor}>\n                      {experience.date}\n                    </Text>\n                  </Box>\n                </Flex>\n                <Box textAlign=\"center\" mb={4} zIndex={1} position=\"relative\">\n                  <Text\n                    fontWeight=\"bold\"\n                    fontSize={{ base: \"lg\", md: \"xl\" }}\n                    color={headingColor}\n                    fontFamily=\"Poppins, sans-serif\"\n                    letterSpacing=\"wider\"\n                  >\n                    {experience.title}\n                  </Text>\n                </Box>\n                <Box as=\"ul\" pl={4} mt={4} color={textColor} textAlign=\"left\" zIndex={1} position=\"relative\">\n                  {experience.description.map((desc, i) => (\n                    <Text as=\"li\" mb={3} key={i} display=\"flex\" alignItems=\"center\" fontSize=\"sm\">\n                      <Box as=\"span\" color={headingColor} mr={2}>•</Box> {desc}\n                    </Text>\n                  ))}\n                </Box>\n                <Wrap mt={4} spacing={2} justify=\"center\">\n                  {experience.tags.map((tag, i) => (\n                    <WrapItem key={i}>\n                      <Tag\n                        size=\"md\"\n                        variant=\"solid\"\n                        colorScheme=\"teal\"\n                        borderRadius=\"full\"\n                        cursor=\"pointer\"\n                        _hover={{ transform: \"scale(1.2)\", backgroundColor: tagHoverColor }}\n                        transition=\"all 0.3s ease-in-out\"\n                      >\n                        {tag}\n                      </Tag>\n                    </WrapItem>\n                  ))}\n                </Wrap>\n                <Box mt={4}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={headingColor}>\n                    Impact & Performance:\n                  </Text>\n                  <Progress colorScheme=\"teal\" size=\"sm\" value={experience.progress} mt={2} borderRadius=\"md\" />\n                </Box>\n                <Box mt={4}>\n                  <Text fontSize=\"sm\" fontWeight=\"bold\" color={headingColor}>\n                    Key Learning:\n                  </Text>\n                  <Text fontSize=\"sm\" mt={2} color={secondaryTextColor}>\n                    {experience.learning}\n                  </Text>\n                </Box>\n              </Box>\n            </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Experience;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { Children, useMemo } from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingX?: SystemProps[\"margin\"]\n  /**\n   * The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined.\n   * @type SystemProps[\"margin\"]\n   */\n  spacingY?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   * @default false\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    spacingX,\n    spacingY,\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _children = useMemo(\n    () =>\n      shouldWrapChildren\n        ? Children.map(children, (child, index) => (\n            <WrapItem key={index}>{child}</WrapItem>\n          ))\n        : children,\n    [children, shouldWrapChildren],\n  )\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul\n        className=\"chakra-wrap__list\"\n        __css={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: justify,\n          alignItems: align,\n          flexDirection: direction,\n          listStyleType: \"none\",\n          gap: spacing,\n          columnGap: spacingX,\n          rowGap: spacingY,\n          padding: \"0\",\n        }}\n      >\n        {_children}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nWrap.displayName = \"Wrap\"\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nWrapItem.displayName = \"WrapItem\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [TagStylesProvider, useTagStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TagStylesContext`,\n  errorMessage: `useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Tag />\" `,\n})\n\nexport { useTagStyles }\n\nexport interface TagProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Tag\"> {}\n\n/**\n * The tag component is used to label or categorize UI elements.\n * To style the tag globally, change the styles in `theme.components.Tag`\n * @see Docs https://chakra-ui.com/tag\n */\nexport const Tag = forwardRef<TagProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props)\n  const ownProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container,\n  }\n\n  return (\n    <TagStylesProvider value={styles}>\n      <chakra.span ref={ref} {...ownProps} __css={containerStyles} />\n    </TagStylesProvider>\n  )\n})\n\nTag.displayName = \"Tag\"\n\nexport interface TagLabelProps extends HTMLChakraProps<\"span\"> {}\n\nexport const TagLabel = forwardRef<TagLabelProps, \"span\">((props, ref) => {\n  const styles = useTagStyles()\n  return <chakra.span ref={ref} noOfLines={1} {...props} __css={styles.label} />\n})\n\nTagLabel.displayName = \"TagLabel\"\n\nexport const TagLeftIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginEnd=\"0.5rem\" {...props} />\n))\n\nTagLeftIcon.displayName = \"TagLeftIcon\"\n\nexport const TagRightIcon = forwardRef<IconProps, \"svg\">((props, ref) => (\n  <Icon ref={ref} verticalAlign=\"top\" marginStart=\"0.5rem\" {...props} />\n))\n\nTagRightIcon.displayName = \"TagRightIcon\"\n\nconst TagCloseIcon: React.FC<IconProps> = (props) => (\n  <Icon verticalAlign=\"inherit\" viewBox=\"0 0 512 512\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n    />\n  </Icon>\n)\n\nTagCloseIcon.displayName = \"TagCloseIcon\"\n\nexport interface TagCloseButtonProps\n  extends Omit<HTMLChakraProps<\"button\">, \"disabled\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\n/**\n * TagCloseButton is used to close \"remove\" the tag\n * @see Docs https://chakra-ui.com/tag\n */\nexport const TagCloseButton = forwardRef<TagCloseButtonProps, \"button\">(\n  (props, ref) => {\n    const { isDisabled, children, ...rest } = props\n\n    const styles = useTagStyles()\n\n    const btnStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      outline: \"0\",\n      ...styles.closeButton,\n    }\n\n    return (\n      <chakra.button\n        ref={ref}\n        aria-label=\"close\"\n        {...rest}\n        type=\"button\"\n        disabled={isDisabled}\n        __css={btnStyles}\n      >\n        {children || <TagCloseIcon />}\n      </chakra.button>\n    )\n  },\n)\n\nTagCloseButton.displayName = \"TagCloseButton\"\n"],"names":["keyframes","strokeDasharray","strokeDashoffset","transform","progress","left","stripe","from","backgroundPosition","to","ProgressStylesProvider","useProgressStyles","createContext","name","errorMessage","ProgressFilledTrack","forwardRef","props","ref","min","max","value","isIndeterminate","role","rest","progress2","options","valueText","getValueText","percent","valueToPercent","bind","getAriaValueText","getProgressProps","trackStyles","height","filledTrack","jsx","chakra","div","style","width","concat","__css","Progress","_a","hasStripe","isAnimated","children","borderRadius","propBorderRadius","ariaLabel","ariaLabelledBy","ariaValueText","title","omitThemingProps","styles","useMultiStyleConfig","track","stripeAnimation","animation","css","position","willChange","minWidth","overflow","jsxs","displayName","Experience","sectionBg","useColorModeValue","sectionColor","cardBg","headingColor","textColor","secondaryTextColor","tagHoverColor","experiences","logo","process","date","company","link","hoverColor","location","description","tags","learning","_jsx","Box","as","bg","color","py","px","id","_jsxs","Container","maxW","Heading","size","mb","textAlign","fontFamily","fontWeight","letterSpacing","SimpleGrid","columns","base","md","spacing","map","experience","index","motion","whileHover","translateY","transition","duration","p","boxShadow","_before","content","top","right","bottom","zIndex","opacity","_hover","h","display","flexDirection","justifyContent","Flex","align","Image","src","alt","boxSize","mr","objectFit","Link","href","isExternal","fontSize","textDecoration","Text","fontStyle","pl","mt","desc","i","alignItems","Wrap","justify","tag","WrapItem","Tag","variant","colorScheme","cursor","backgroundColor","className","centerContent","useStyleConfig","cx","spacingX","spacingY","direction","shouldWrapChildren","_children","useMemo","Children","child","ul","flexWrap","listStyleType","gap","columnGap","rowGap","padding","li","Grid","templateAreas","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","minChildWidth","theme","useTheme","mapResponsive","_value","getToken","n","widthToColumns","count","TagStylesProvider","useTagStyles","ownProps","containerStyles","verticalAlign","maxWidth","container","span","noOfLines","label","Icon","marginEnd","marginStart","TagCloseIcon","viewBox","fill","d","isDisabled","btnStyles","outline","closeButton","button","type","disabled"],"sourceRoot":""}