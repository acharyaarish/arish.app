{"version":3,"file":"static/js/883.88a3287b.chunk.js","mappings":"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","sources":["components/Education.js","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Container,\n  Heading,\n  SimpleGrid,\n  Flex,\n  Text,\n  Image,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\n\nconst cardVariant = {\n  hidden: { opacity: 0, y: 30 },\n  visible: { opacity: 1, y: 0 },\n  hover: { scale: 1.08, transition: { duration: 0.2 } },\n};\n\nconst Education = () => {\n  const sectionBg = useColorModeValue('#F0F8FF', '#222831'); \n  const sectionColor = useColorModeValue('#1A202C', '#E2E8F0');\n  const cardBg = useColorModeValue('#FFFFFF', '#E2E8F0');\n  const cardHoverBg = useColorModeValue('#ADD8E6', '#ADD8E6'); \n  const headingColor = useColorModeValue('#2C5282', '#F6AD55');\n  const textColor = useColorModeValue('#1A202C', '#1A202C');\n\n  const education = [\n    {\n      logo: `${process.env.PUBLIC_URL}/img/university-logo.png`,\n      degree: 'Master of Data Science',\n      institution: 'University of Canberra',\n      location: 'Canberra, Australia',\n      date: 'July 2022 â€“ June 2024',\n    },\n    {\n      logo: `${process.env.PUBLIC_URL}/img/another-university-logo.png`,\n      degree: 'Bachelor of Computer Networking and IT Security',\n      institution: 'London Metropolitan University',\n      location: 'Kathmandu, Nepal',\n      date: 'July 2017 â€“ March 2020',\n    },\n  ];\n\n  return (\n    <Box as=\"section\" bg={sectionBg} color={sectionColor} py={24} id=\"education\">\n      <Container maxW=\"container.xl\" textAlign=\"center\">\n        <Heading as=\"h2\" size=\"lg\" mb={10} color={headingColor}>\n          Education ðŸŽ“\n        </Heading>\n        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={10} justifyContent=\"center\">\n          {education.map((edu, index) => (\n            <motion.div\n              key={index}\n              variants={cardVariant}\n              initial=\"hidden\"\n              animate=\"visible\"\n              whileHover=\"hover\"\n              transition={{ delay: index * 0.1 }}\n            >\n              <Box\n                bg={cardBg}\n                color={textColor}\n                p={6}\n                borderRadius=\"md\"\n                boxShadow=\"lg\"\n                _hover={{ bg: cardHoverBg }}\n                transition=\"background-color 0.2s ease, transform 0.2s ease\"\n                h=\"100%\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Flex align=\"center\" mb={4} justifyContent=\"center\">\n                  <Image\n                    src={edu.logo}\n                    alt={edu.institution}\n                    borderRadius=\"full\"\n                    boxSize=\"80px\"\n                    objectFit=\"contain\"\n                  />\n                </Flex>\n                <Box textAlign=\"center\">\n                  <Text fontWeight=\"bold\" fontSize=\"md\">\n                    {edu.institution}\n                  </Text>\n                  <Text fontSize=\"xs\" color=\"gray.500\" mb={1}>\n                    {edu.location}\n                  </Text>\n                  <Text fontWeight=\"bold\" fontSize=\"sm\" mb={1} mt={1}>\n                    {edu.degree}\n                  </Text>\n                  <Text fontSize=\"xs\" color=\"gray.500\">\n                    {edu.date}\n                  </Text>\n                </Box>\n              </Box>\n            </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Education;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"names":["cardVariant","hidden","opacity","y","visible","hover","scale","transition","duration","Education","sectionBg","useColorModeValue","sectionColor","cardBg","cardHoverBg","headingColor","textColor","education","logo","concat","process","degree","institution","location","date","_jsx","Box","as","bg","color","py","id","children","_jsxs","Container","maxW","textAlign","Heading","size","mb","SimpleGrid","columns","base","md","spacing","justifyContent","map","edu","index","motion","div","variants","initial","animate","whileHover","delay","p","borderRadius","boxShadow","_hover","h","display","flexDirection","alignItems","Flex","align","Image","src","alt","boxSize","objectFit","Text","fontWeight","fontSize","mt","forwardRef","props","ref","className","centerContent","rest","omitThemingProps","styles","useStyleConfig","jsx","chakra","cx","__css","displayName","Grid","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","spacingX","spacingY","minChildWidth","theme","useTheme","width","mapResponsive","value","_value","getToken","n","widthToColumns","count"],"sourceRoot":""}