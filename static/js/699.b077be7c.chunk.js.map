{"version":3,"file":"static/js/699.b077be7c.chunk.js","mappings":"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","sources":["components/Skills.js","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/layout/src/simple-grid.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  SimpleGrid,\n  Text,\n  VStack,\n  Icon,\n  Heading,\n  useColorModeValue,\n  Container,\n} from '@chakra-ui/react';\nimport { motion } from 'framer-motion';\nimport {\n  FaPython, FaReact, FaNodeJs, FaAws, FaCloud, FaDatabase, FaLinux, FaTools,\n  FaRProject, FaJs, FaGitAlt, FaTable, FaChartLine, FaLaptopCode\n} from 'react-icons/fa';\n\nconst skills = [\n  { name: 'Python', icon: FaPython, description: 'Data analysis and automation' },\n  { name: 'R', icon: FaRProject, description: 'Statistical computing' },\n  { name: 'JavaScript', icon: FaJs, description: 'Web development' },\n  { name: 'React', icon: FaReact, description: 'Frontend development' },\n  { name: 'Node.js', icon: FaNodeJs, description: 'Backend development' },\n  { name: 'Git', icon: FaGitAlt, description: 'Version control' },\n  { name: 'Linux', icon: FaLinux, description: 'System administration' },\n  { name: 'Pandas', icon: FaTools, description: 'Data manipulation' },\n  { name: 'AWS', icon: FaAws, description: 'Cloud services' },\n  { name: 'Azure', icon: FaCloud, description: 'Cloud computing' },\n  { name: 'GCP', icon: FaCloud, description: 'Google Cloud Platform' },\n  { name: 'SQL', icon: FaDatabase, description: 'Database management' },\n  { name: 'Tableau', icon: FaTable, description: 'Data visualization' },\n  { name: 'PowerBI', icon: FaChartLine, description: 'Business analytics' },\n  { name: 'CISCO', icon: FaLaptopCode, description: 'Networking' },\n  { name: 'SAP', icon: FaTools, description: 'Enterprise software' },\n];\n\nconst Skills = () => {\n  const bg = useColorModeValue('#e0f7fa', '#263238'); \n  const cardBg = useColorModeValue('#ffffff', '#37474f'); \n  const textColor = useColorModeValue('#212121', '#e0e0e0');\n  const iconColor = useColorModeValue('#00796b', '#4caf50');\n  const descriptionColor = useColorModeValue('#546e7a', '#b0bec5');\n\n  return (\n    <Box id=\"skills\" bg={bg} py={16} px={6}>\n      <Container maxW=\"container.xl\">\n        <VStack spacing={8} mb={8} textAlign=\"center\">\n          <Heading fontSize=\"3xl\" fontWeight=\"bold\" color={iconColor}>\n            Skills\n          </Heading>\n          <Text fontSize=\"lg\" color={textColor} fontFamily=\"Poppins, sans-serif\">\n            Basic understanding, constantly improving:\n          </Text>\n        </VStack>\n        <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={8}>\n          {skills.map((skill, index) => (\n            <motion.div\n              key={index}\n              whileHover={{ scale: 1.1, rotate: 2 }}\n              transition={{ duration: 0.2 }}\n            >\n              <Box\n                bg={cardBg}\n                p={6}\n                borderRadius=\"lg\"\n                boxShadow=\"lg\"\n                textAlign=\"center\"\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                transition=\"transform 0.2s ease\"\n                _hover={{ transform: 'scale(1.08)' }}\n              >\n                <Icon as={skill.icon} boxSize=\"50px\" color={iconColor} mb={4} />\n                <Text fontWeight=\"bold\" fontSize=\"lg\" color={textColor}>\n                  {skill.name}\n                </Text>\n                <Text fontSize=\"sm\" color={descriptionColor} mt={2}>\n                  {skill.description}\n                </Text>\n              </Box>\n            </motion.div>\n          ))}\n        </SimpleGrid>\n      </Container>\n    </Box>\n  );\n};\n\nexport default Skills;\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"],"names":["skills","name","icon","FaPython","description","FaRProject","FaJs","FaReact","FaNodeJs","FaGitAlt","FaLinux","FaTools","FaAws","FaCloud","FaDatabase","FaTable","FaChartLine","FaLaptopCode","Skills","bg","useColorModeValue","cardBg","textColor","iconColor","descriptionColor","_jsx","Box","id","py","px","children","_jsxs","Container","maxW","VStack","spacing","mb","textAlign","Heading","fontSize","fontWeight","color","Text","fontFamily","SimpleGrid","columns","base","md","lg","map","skill","index","motion","div","whileHover","scale","rotate","transition","duration","p","borderRadius","boxShadow","display","flexDirection","alignItems","justifyContent","_hover","transform","Icon","as","boxSize","mt","Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","jsx","chakra","__css","displayName","spacingX","spacingY","minChildWidth","theme","useTheme","width","mapResponsive","value","_value","getToken","n","concat","widthToColumns","count"],"sourceRoot":""}